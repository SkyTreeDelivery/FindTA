<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://www.mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.find.mapper.UserMapper">
    <sql id="user_columns">
        id, username, password, age, gender, face_image, face_image_big, nickname, email, gmt_created, gmt_modified, cid, phone, location, token
    </sql>

    <sql id="friend_request_columns">
        id, send_user_id, accept_user_id, request_message, gmt_created, gmt_modified
    </sql>

    
    <select id="getUserById" resultType="com.find.pojo.User">
        select
        <include refid="user_columns"/>
        from chat_user
        <where>
            userId = #{userId}
        </where>
    </select>

    <select id="getUserByUsername" resultType="com.find.pojo.User">
        select
        <include refid="user_columns"/>
        from chat_user
        <where>
            username = #{username}
        </where>
    </select>

    <select id="getUserByEmail" resultType="com.find.pojo.User">
        select
        <include refid="user_columns"/>
        from chat_user
        <where>
            email = #{email}
        </where>
    </select>

    <select id="getUserByToken" resultType="com.find.pojo.User">
        select
        <include refid="user_columns"/>
        from chat_user
        <where>
            token = #{token}
        </where>
    </select>

    <select id="listUsersByNcikname" resultType="com.find.pojo.User">
        select
        <include refid="user_columns"/>
        from chat_user
        <where>
            username like #{nickname}
        </where>
    </select>

    <select id="listUserByLoc" resultType="com.find.pojo.User">
        select
        <include refid="user_columns"/>
        from chat_user
        <where>
            ST_DWithin(location,ST_GeomFromGeoJSON(#{pointJson},4326),#{redius})
        </where>
        order by ST_Distance(location,ST_GeomFromGeoJSON(#{pointJson},4326))
        limit #{userCount}
    </select>

    <select id="listUsersByTagList" resultType="com.find.pojo.User">
        select
        <include refid="com.find.mapper.Context.chat_user_columns">
            <property name="a" value="u"/>
        </include>
        from
        chat_user as u
        join chat_user_tag as ut on u.id = ut.user_id
        join chat_tag as t on ut.tag_id = t.id
        <where>
            ut.tag_id in
            <foreach collection="tagIdList" item="tagId" open="(" separator="," close=")">
                #{tagId}
            </foreach>
        </where>
    </select>

   
    <insert id="doCreateUser">
        INSERT INTO public.chat_user (
        username, password, age, gender, face_image, face_image_big, nickname, email, gmtCreated, gmtModified, cid, phone, location)
        VALUES 
        (#{username}, #{password}, #{age}, #{gender}, #{face_image}, #{face_image_big}
        , #{nickname}, #{email}, #{gmtCreated}, gmtModified, #{cid}, #{phone}, ST_GeomFromGeoJSON(#{location},4326))
    </insert>

    <update id="updateUser">
        UPDATE public.chat_user
        <set>
            <if test="password != null">
                password=#{password},
            </if>
            <if test="age != null">
                age=#{age},
            </if>
            <if test="gender != null">
                gender=#{gender},
            </if>
            <if test="faceImage != null">
                face_image=#{faceImage},
            </if>
            <if test="faceImageBig != null">
                face_image_big=#{faceImageBig},
            </if>
            <if test="nickname != null">
                nickname=#{nickname},
            </if>
            <if test="email != null">
                email=#{email},
            </if>
            <if test="gmtModified != null">
                gmtModified=#{gmtModified},
            </if>
            <if test="cid != null">
                cid=#{cid},
            </if>
            <if test="phone != null">
                phone=#{phone},
            </if>
            <if test="location != null">
                location=ST_GeomFromGeoJSON(#{location},4326),
            </if>
            <if test="token != null">
                phone=#{token}
            </if>
        </set>
        <where>
            id = #{id}
        </where>
    </update>

    <delete id="deleteUserById">
        delete from chat_user where id = #{id}
    </delete>

<!--    ==================== friendrequest ==========================================   -->
    <select id="getFriendRequestById" resultType="com.find.pojo.FriendRequest">
        select
        <include refid="friend_request_columns"/>
        from chat_friendrequest
        <where>
            id = #{frId}
        </where>
    </select>

    <select id="getFriendRequestBySendIdAndAcceptId" resultType="com.find.pojo.FriendRequest">
        select
        <include refid="friend_request_columns"/>
        from chat_friendrequest
        <where>
            send_user_id = #{sendUserId}
            and accept_user_id = #{acceptUserId}
        </where>
    </select>

    <select id="listFriendRequestsByUserId" resultType="com.find.pojo.vo.FriendRequestListVO">
        select
        fr.id as id,
        accept.nickname as nickname,
        accept.gender as gender,
        accept.face_image as faceImage
        from
        chat_user as send
        join chat_friendrequest as fr on send.id = fr.user_send_id
        join chat_user as accept on fr.accept_send_id = accept.id
        <where>
            send.id = #{userId}
        </where>
    </select>


    <insert id="doCreateFriendRequest">
        INSERT INTO chat_friendrequest(
        send_user_id, accept_user_id, request_message, gmt_created, gmt_modified)
        VALUES (#{sendUserId}, #{acceptUserId}, #{requestMessage}, #{gmtCreated}, #{gmtModified});
    </insert>

    <update id="updateFriendRequest">
        UPDATE public.chat_friendrequest
        <set>
            <if test="requestMessage != null">
                request_message= #{requestMessage},
            </if>
            <if test="gmtModified != null">
                gmt_modified= #{gmtModified}
            </if>
        </set>
        <where>
            id= #{id}
        </where>
    </update>

    <delete id="deleteFriendRequestById">
        delete from chat_friendrequest where id = #{id}
    </delete>

<!--    ========================= Friend =======================-->
</mapper>